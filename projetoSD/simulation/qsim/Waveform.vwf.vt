// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2023 15:24:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ProjetoSD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProjetoSD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg tecla_0;
reg tecla_1;
reg tecla_2;
reg tecla_3;
reg tecla_4;
reg tecla_5;
reg tecla_6;
reg tecla_7;
reg tecla_8;
reg tecla_9;
reg tecla_A;
reg tecla_Ast;
reg tecla_B;
reg tecla_C;
reg tecla_D;
reg tecla_Hash;
// wires                                               
wire [13:0] resultado;

// assign statements (if any)                          
ProjetoSD i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.resultado(resultado),
	.tecla_0(tecla_0),
	.tecla_1(tecla_1),
	.tecla_2(tecla_2),
	.tecla_3(tecla_3),
	.tecla_4(tecla_4),
	.tecla_5(tecla_5),
	.tecla_6(tecla_6),
	.tecla_7(tecla_7),
	.tecla_8(tecla_8),
	.tecla_9(tecla_9),
	.tecla_A(tecla_A),
	.tecla_Ast(tecla_Ast),
	.tecla_B(tecla_B),
	.tecla_C(tecla_C),
	.tecla_D(tecla_D),
	.tecla_Hash(tecla_Hash)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	#100000;
end 

// tecla_0
initial
begin
	tecla_0 = 1'b0;
end 

// tecla_1
initial
begin
	repeat(9)
	begin
		tecla_1 = 1'b0;
		tecla_1 = #55000 1'b1;
		# 55000;
	end
	tecla_1 = 1'b0;
end 

// tecla_2
initial
begin
	tecla_2 = 1'b0;
end 

// tecla_3
initial
begin
	tecla_3 = 1'b0;
end 

// tecla_4
initial
begin
	tecla_4 = 1'b0;
end 

// tecla_5
initial
begin
	tecla_5 = 1'b0;
end 

// tecla_6
initial
begin
	tecla_6 = 1'b0;
end 

// tecla_7
initial
begin
	tecla_7 = 1'b0;
end 

// tecla_8
initial
begin
	tecla_8 = 1'b0;
end 

// tecla_9
initial
begin
	tecla_9 = 1'b0;
end 

// tecla_A
initial
begin
	tecla_A = 1'b0;
	tecla_A = #550000 1'b1;
end 

// tecla_Ast
initial
begin
	tecla_Ast = 1'b1;
	# 75000;
	repeat(6)
	begin
		tecla_Ast = 1'b0;
		tecla_Ast = #75000 1'b1;
		# 75000;
	end
	tecla_Ast = 1'b0;
end 

// tecla_B
initial
begin
	tecla_B = 1'b0;
end 

// tecla_C
initial
begin
	tecla_C = 1'b0;
end 

// tecla_D
initial
begin
	tecla_D = 1'b0;
end 

// tecla_Hash
initial
begin
	tecla_Hash = 1'b1;
	# 150000;
	repeat(2)
	begin
		tecla_Hash = 1'b0;
		tecla_Hash = #150000 1'b1;
		# 150000;
	end
	tecla_Hash = 1'b0;
	tecla_Hash = #150000 1'b1;
end 
endmodule

